<?xml version="1.0" encoding="UTF-8"?>
<sonar:sonar xmlns:design="http://www.thalesgroup.com/sonar/design/v1"
             xmlns:documentation="http://www.thalesgroup.com/sonar/documentation/v1"
             xmlns:size="http://www.thalesgroup.com/sonar/size/v1"
             xmlns:sonar="http://www.thalesgroup.com/sonar/v2"
             xmlns:xs="http://www.w3.org/2001/XMLSchema"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:tests="http://www.thalesgroup.com/sonar/tests/v2"
             xmlns:measures="http://www.thalesgroup.com/sonar/measures/v2"
             xmlns:violations="http://www.thalesgroup.com/sonar/violations/v2"
             xmlns:duplications="http://www.thalesgroup.com/sonar/duplications/v1"
             xmlns:coverage="http://www.thalesgroup.com/sonar/coverage/v2"
             version="2.0">   
   <sonar:measures toolname="cpd">      
      <measures:duplications>         
         <duplications:set lines="22" tokens="119">            
            <duplications:resource line="43"
                                   path="/Users/gregory/trunk/hudson/git/ci-game-plugin/src/main/java/hudson/plugins/cigame/rules/plugins/checkstyle/DefaultCheckstyleRule.java"/>            
            <duplications:resource line="43"
                                   path="/Users/gregory/trunk/hudson/git/ci-game-plugin/src/main/java/hudson/plugins/cigame/rules/plugins/warnings/DefaultWarningsRule.java"/>            
            <duplications:codefragment><![CDATA[                                Messages.WarningsRuleSet_DefaultRule_FixedWarningsCount(newWarnings * -1));        }        return RuleResult.EMPTY_INT_RESULT;        }        @Override        public RuleResult<Integer> evaluate(AbstractBuild<?, ?> previousBuild,                        AbstractBuild<?, ?> build) {                if (build != null && build.getResult() != null && build.getResult().isWorseOrEqualTo(Result.FAILURE)) {                return RuleResult.EMPTY_INT_RESULT;        }        if (previousBuild == null) {                if ( !(build instanceof MavenBuild)) {                        // backward compatibility                        return RuleResult.EMPTY_INT_RESULT;                return RuleResult.EMPTY_INT_RESULT;        }        if (previousBuild == null) {                if ( !(build instanceof MavenBuild)) {                        // backward compatibility                        return RuleResult.EMPTY_INT_RESULT;                }        } else if (previousBuild.getResult().isWorseOrEqualTo(Result.FAILURE)) {                return RuleResult.EMPTY_INT_RESULT;        }        List<WarningsResultAction> currentActions = ActionRetriever.getResult(build, Result.UNSTABLE, WarningsResultAction.class);        ]]></duplications:codefragment>         
         </duplications:set>         
         <duplications:set lines="22" tokens="114">            
            <duplications:resource line="43"
                                   path="/Users/gregory/trunk/hudson/git/ci-game-plugin/src/main/java/hudson/plugins/cigame/rules/plugins/checkstyle/DefaultCheckstyleRule.java"/>            
            <duplications:resource line="48"
                                   path="/Users/gregory/trunk/hudson/git/ci-game-plugin/src/main/java/hudson/plugins/cigame/rules/plugins/opentasks/DefaultOpenTasksRule.java"/>            
            <duplications:codefragment><![CDATA[                                    Messages.OpenTasksRule_DefaultRule_FixedTasksCount(newTasks * -1, tasksPriority.name()));            }            return RuleResult.EMPTY_INT_RESULT;            }            @Override            public RuleResult<Integer> evaluate(AbstractBuild<?, ?> previousBuild,                            AbstractBuild<?, ?> build) {                    if (build != null && build.getResult() != null && build.getResult().isWorseOrEqualTo(Result.FAILURE)) {                    return RuleResult.EMPTY_INT_RESULT;            }            if (previousBuild == null) {                    if ( !(build instanceof MavenBuild)) {                            // backward compatibility                            return RuleResult.EMPTY_INT_RESULT;                    }            } else if (previousBuild.getResult().isWorseOrEqualTo(Result.FAILURE)) {                    return RuleResult.EMPTY_INT_RESULT;            }            List<TasksResultAction> currentActions = ActionRetriever.getResult(build, Result.UNSTABLE, TasksResultAction.class);        ]]></duplications:codefragment>         
         </duplications:set>      
      </measures:duplications>   
   </sonar:measures>
</sonar:sonar>